{"version":3,"file":"public/javascripts/app.js","sources":["app/src/controls.coffee","app/src/erosion-engine.coffee","app/src/land-generator.coffee","app/src/land-management-model.coffee","app/src/main.coffee","app/src/plant-engine.coffee"],"names":[],"mappings":"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","sourcesContent":["$precipitationSlider = $ \"#precipitation-slider\"\n$precipitationSliderDiv = $ \"#user-precipitation\"\n$zone1Slider = $ \"#zone-1-slider\"\n$zone2Slider = $ \"#zone-2-slider\"\n$slopeSlidersDiv = $ \"#slope-sliders\"\nerosionGraph = null\ntopsoilCountGraph = null\nzone1Planting = \"\"\nzone2Planting = \"\"\n\n\n\nenableZoneSliders = (enable) ->\n  $zone1Slider.slider if enable then \"enable\" else \"disable\"\n  $zone2Slider.slider if enable then \"enable\" else \"disable\"\n  if enable then $slopeSlidersDiv.removeClass \"disabled\" else $slopeSlidersDiv.addClass \"disabled\"\n\nupdatePrecipitationBarchart = (data) ->\n  $(\".inner-bar\").each (i) ->\n    $this = $(this)\n    precip = data[i]\n    normalized = precip / 500\n    height = 55 * normalized\n    margin = 55 - height\n    $this.stop true\n    $this.animate height: height, marginTop: margin, alt: height\n    $this.parent().attr({title: precip})\n\n$ ->\n  $(\"button\").button()\n  $(\"#playback\").buttonset()\n  $(\".icon-pause\").hide()\n  $(\".chosen-select\").chosen\n    disable_search:true\n    width: 158\n  $precipitationSlider.slider  min: 0, max: 500, step: 1, value: 166\n  $zone1Slider.slider  min: -3, max: 3, step: 0.5, value: 0\n  $zone2Slider.slider  min: -3, max: 3, step: 0.5, value: 0\n\n  $('#min-erosion-probability-slider')\n    .slider min: 0, max: 1, step: 0.05, value: model.minErosionProbability\n    .on 'slide', (event, ui) ->\n      model.minErosionProbability = ui.value\n      $(this).parent().parent().find('.slider-value').html ui.value.toFixed(2)\n    .parent().parent().find('.slider-value').html model.minErosionProbability.toFixed(2)\n\n  $('#fully-protective-vegetation-level-slider')\n    .slider min: 0, max: 5, step: 0.25, value: model.fullyProtectiveVegetationLevel\n    .on 'slide', (event, ui) ->\n      model.fullyProtectiveVegetationLevel = ui.value\n      $(this).parent().parent().find('.slider-value').html ui.value.toFixed(2)\n    .parent().parent().find('.slider-value').html model.fullyProtectiveVegetationLevel.toFixed(2)\n\n  enableZoneSliders false\n  $precipitationSlider.slider(\"disable\")\n\n\nwindow.initControls = ->\n  $('#date-string').text(model.dateString)\n  setupGraphs()\n  updatePrecipitationBarchart model.getCurrentClimateData()\n\nreset = ->\n  model.stop()\n  $(\".icon-pause\").hide()\n  $(\".icon-play\").show()\n  model.reset()\n  erosionGraph.reset() if erosionGraph?\n  topsoilCountGraph.reset() if topsoilCountGraph?\n\n$('#play-pause-button').click ->\n  if model.anim.animStop\n    model.start()\n    $(\".icon-pause\").show()\n    $(\".icon-play\").hide()\n  else\n    model.stop()\n    $(\".icon-pause\").hide()\n    $(\".icon-play\").show()\n\n$('#reset-button').click reset\n\n\n$(\"#terrain-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setLandType selection\n  reset()\n\n  enableZoneSliders(selection is \"Sliders\")\n\n$(\"#zone1-planting-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setZoneManagement 0, selection\n  zone1Planting = selection\n\n$(\"#zone2-planting-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setZoneManagement 1, selection\n  zone2Planting = selection\n\n$precipitationSlider.on 'slide', (event, ui) ->\n  model.setUserPrecipitation ui.value\n  updatePrecipitationBarchart model.getCurrentClimateData()\n  $(\"#precipitation-value\").text model.precipitation\n\n$(\"#climate-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setClimate selection\n  enable = selection is \"user\"\n  $precipitationSlider.slider if enable then \"enable\" else \"disable\"\n  if enable then $precipitationSliderDiv.removeClass \"disabled\" else $precipitationSliderDiv.addClass \"disabled\"\n\n  updatePrecipitationBarchart model.getCurrentClimateData()\n  $(\"#precipitation-value\").text model.precipitation\n\n$zone1Slider.on 'slide', (event, ui) ->\n  model.zone1Slope = ui.value\n  reset()\n\n$zone2Slider.on 'slide', (event, ui) ->\n  model.zone2Slope = ui.value\n  reset()\n\n$('input.property').click ->\n  $this    = $(this)\n  property = $this.attr('id')\n  checked  = $this.is(':checked')\n  model[property] = checked\n  true\n\nsetupGraphs = ->\n  if $('#erosion-graph').length\n\n    erosionGraph = LabGrapher('#erosion-graph',\n      title:  \"Erosion Rates\"\n      xlabel: \"Time (year)\"\n      ylabel: \"Monthly Erosion\"\n      xmax:   2020\n      xmin:   2013\n      ymax:   100\n      ymin:   0\n      xTickCount: 4\n      yTickCount: 5\n      xFormatter: \"d\"\n      dataSampleStart: 2013\n      sampleInterval: 1/60\n      realTime: true\n      fontScaleRelativeToParent: true\n      dataColors: [\n        [160,   0,   0],\n        [ 44, 160,   0],\n        [ 44,   0, 160],\n        [  0,   0,   0],\n        [255, 127,   0],\n        [255,   0, 255]]\n    )\n\n  if $('#topsoil-count-graph').length\n    topsoilCountGraph = LabGrapher('#topsoil-count-graph',\n      title:  \"Amount of Topsoil in Zone\"\n      xlabel: \"Time (year)\"\n      ylabel: \"Amount of Topsoil\"\n      xmax:   2020\n      xmin:   2013\n      ymax:   1000\n      ymin:   0\n      xTickCount: 4\n      yTickCount: 5\n      xFormatter: \"d\"\n      dataSampleStart: 2013\n      sampleInterval: 1/60\n      realTime: true\n      fontScaleRelativeToParent: true\n      dataColors: [\n        [160,   0,   0],\n        [ 44, 160,   0],\n        [ 44,   0, 160],\n        [  0,   0,   0],\n        [255, 127,   0],\n        [255,   0, 255]]\n    )\n\ndo ->\n  # simple exponential smoothing with alpha = 0.3\n  makeSmoothed = ->\n    s = null\n    alpha = 0.3\n    (x) -> if s is null then (s = x) else (s = alpha * x + (1 - alpha) * s)\n\n  zone1Smoothed = makeSmoothed()\n  zone2Smoothed = makeSmoothed()\n\n  $(document).on LandManagementModel.STEP_INTERVAL_ELAPSED, ->\n    $('#date-string').text(model.dateString)\n    if erosionGraph\n      erosionGraph.addSamples [\n        0, 0, 0, 0,\n        zone1Smoothed(model.zone1ErosionCount),\n        zone2Smoothed(model.zone2ErosionCount)\n      ]\n    model.resetErosionCounts()\n    if topsoilCountGraph\n      topsoilInZone = model.topsoilInZones()\n      topsoilCountGraph.addSamples [0, 0, 0, 0, topsoilInZone[1], topsoilInZone[2]]\n\n\n$(document).on LandManagementModel.STEP_INTERVAL_ELAPSED, ->\n  $(\".inner-bar\").removeClass \"current-month\"\n  $($(\".inner-bar\")[model.month]).addClass \"current-month\"\n  $(\"#precipitation-value\").text model.precipitation\n","SKY_COLOR = [131, 216, 240]\n\nLIGHT_LAND_COLOR = [135, 79, 49]\nDARK_LAND_COLOR = [105, 49, 19]\nTERRACE_COLOR = [60, 60, 60]\n\nGOOD_SOIL_COLOR = [88, 41, 10]\nPOOR_SOIL_COLOR = [193, 114, 7]\n\nMAGENTA = [255, 0, 255]\nORANGE = [255, 127, 0]\n\nSKY  = \"sky\"\nLAND = \"land\"\n\nclass ErosionEngine\n\n  u = ABM.util\n\n  climateData = {\n    temperate: {\n      precipitation: [22, 26, 43, 73, 108, 115, 89, 93, 95, 58, 36, 27]\n    },\n    tropical: {\n      precipitation: [200, 290, 380, 360, 280, 120, 80, 40, 30, 30, 70, 100]\n    },\n    arid: {\n      precipitation: [11.4, 13.2, 23.5, 8.8, 14.8, 34.1, 133.1, 120.2, 47, 7.8, 7.7, 6.8]\n    }\n  }\n  climate = climateData.temperate\n  userPrecipitation = 166\n\n  precipitation: 0\n\n  minErosionProbability: 0.1\n  fullyProtectiveVegetationLevel: 1\n\n  maxSlope = 2 # necessary?\n  showErosion: true\n\n  zone1ErosionCount: 0\n  zone2ErosionCount: 0\n\n  showSoilQuality: false\n\n  findSurfaceLandPatches: ->\n    surfaceLand = []\n    for x in [@patches.minX..@patches.maxX]\n      y = @patches.maxY\n      y-- while @patches.patch(x, y).type is SKY and y > @patches.minY\n      surfaceLand.push @patches.patch x, y\n\n    surfaceLand\n\n  # Called every tick to modify colors of surface-most INITIAL_TOPSOIL_DEPTH patches.\n  # (A reasonable assumption is made that the patches that change during a tick are no more than\n  # INITIAL_TOPSOIL_DEPTH deeper the land-sky boundary. Hower, we must process at least that depth\n  # because the land generator relies on this method for the initial setup of the topsoil patches.)\n  updateSurfacePatches: ->\n    @surfaceLand = @findSurfaceLandPatches()\n\n    for surfacePatch in @surfaceLand\n      [x, y] = [surfacePatch.x, surfacePatch.y]\n\n      for i in [0...@INITIAL_TOPSOIL_DEPTH]\n        p = @patches.patch x, y - i\n        newColor =\n          if p.isTerrace\n            TERRACE_COLOR\n          else if p.isTopsoil\n            if @showErosion and p.eroded\n              if p.zone is 1 then ORANGE else MAGENTA\n            else if @showSoilQuality\n              zone = if p.x <= 0 then 0 else 1\n              if p.quality < @soilQuality[zone] then p.quality += 0.001\n              if p.quality > @soilQuality[zone] then p.quality -= 0.001\n\n              if p.quality < 0.5\n                POOR_SOIL_COLOR\n              else if p.quality > 1.5\n                GOOD_SOIL_COLOR\n              else\n                LIGHT_LAND_COLOR\n            else\n              LIGHT_LAND_COLOR\n\n        if newColor? then p.color = newColor\n\n\n\n  # We need some way to avoid the overaccumulation of eroded soil and other edge effects that occur\n  # at the left and right edges of the model, which occur because the model doesn't actually\n  # simulate what happens when particles move past the edge of the model window.\n  #\n  # This just forces the left and rightmost edges to have the a height that matches the local slope\n  # at the left and right edges of the model. We use a linear regression here instead of the cruder\n  # (but faster) single-sample estimate made by @getLocalSlope, because this is only done twice per\n  # tick and probably helps to avoid visual artifacts.\n  adjustEdges: ->\n    @adjustEdge 0, 1\n    @adjustEdge @surfaceLand.length - 1, -1\n\n  adjustEdge: (iLim, direction) ->\n    SURFACE_WIDTH = 10\n\n    currentY = @surfaceLand[iLim].y\n    data = ([i, @surfaceLand[i].y] for i in [iLim + direction .. iLim + SURFACE_WIDTH * direction])\n    desiredY = Math.round(ss.linear_regression().data(data).line()(iLim))\n    x = @surfaceLand[iLim].x\n\n    if currentY < desiredY\n      @convertSkyToLand(@patches.patch x, y) for y in [currentY + 1 .. desiredY]\n    else if currentY > desiredY\n      @convertLandToSky(@patches.patch x, y) for y in [desiredY + 1 .. currentY]\n    null\n\n  # A little tricky. This takes a sky patch p and converts it to land. It uses majority rules to\n  # guess its zone of origin and whether it's topsoil or subsoil.\n  convertSkyToLand: (p) ->\n    xMin = Math.max(0, p.x - 5)\n    xMax = Math.min(@patches.maxX - 1, p.x + 5)\n\n    # take a census of nearby patches to see if we should be topsoil and which zone we came from\n    zones =   [0, 0]\n    topsoil = [0, 0]\n\n    for x in [xMin..xMax]\n      ySurface = @surfaceLand[x - @patches.minX].y\n      for y in [ySurface - 2 .. ySurface]\n        p1 = @patches.patch x, y\n        continue if p1.type isnt LAND\n\n        ++zones[p1.zone]\n        ++topsoil[p1.isTopsoil+0]\n\n    p.zone = if zones[0] > zones[1] then 0 else 1\n    p.isTopsoil = topsoil[1] > topsoil[0]\n\n    p.type = LAND\n    p.eroded = true\n    p.isTerrace = false\n    p.stability = 1\n\n    # we'll let @updateSurfaceLandPatches sort it out next cycle\n    p.quality = 1\n    p.color = if p.isTopsoil then LIGHT_LAND_COLOR else DARK_LAND_COLOR\n\n  convertLandToSky: (p) ->\n      p.type = SKY\n      p.color = SKY_COLOR\n      @removeLandProperties p\n\n  erode: ->\n\n    signOf = (x) -> if x is 0 then 1 else Math.round x / Math.abs(x)\n\n    @adjustEdges()\n\n    for i in [1...@surfaceLand.length-1]\n      p = @surfaceLand[i]\n\n      localSlope = @getLocalSlope p.x, p.y\n      slopeContribution = Math.min(1, 2 * Math.abs localSlope)\n\n      vegetation = @getLocalVegetation p.x, p.y\n      totalVegetationSize = 0\n      totalVegetationSize += (if a.isBody then a.size/3 else if a.isRoot then a.size*2/3 else a.size) for a in vegetation\n      vegetationContribution = @minErosionProbability + 0.8 * (1 - Math.min(1, totalVegetationSize / Math.max(@fullyProtectiveVegetationLevel, 0.01)))\n\n      precipitationContribution  = @precipitation / 500\n\n      probabilityOfErosion = 0.1 * slopeContribution * vegetationContribution * precipitationContribution * p.stability\n\n      continue if u.randomFloat(1) > probabilityOfErosion\n\n      p.direction = signOf -localSlope\n\n      # remember, indices into p.n relative to patch p (in the center of the below diagram):\n      # 5  6  7\n      # 3  -  4\n      # 0  1  2\n\n      if p.x is @patches.minX and p.direction is -1\n        # Trying a very simple formula. Basic idea is to extrapolate height to left of leftmost\n        # patch of model, *without* using the leftmost patch itself to determine that height.\n        expectedHeightToLeft = 2 * @surfaceLand[1].y - @surfaceLand[3].y\n        # if land is expected to be higher to the left, we can't erode leftwards\n        continue if expectedHeightToLeft >= p.y\n        # we'll move left and leave the model (p will become sky but not be cloned to a target)\n        target = null\n      else if p.x is @patches.maxX and p.direction is 1\n        lastIndex = @surfaceLand.length - 1\n        expectedHeightToRight = 2 * @surfaceLand[lastIndex - 1].y - @surfaceLand[lastIndex - 3].y\n        continue if expectedHeightToRight >= p.y\n        target = null\n      else if p.n[1+p.direction]?.type is SKY\n        # move downward and in the previous lateral direction\n        target = p.n[1+p.direction]\n      else if p.n[1-p.direction]?.type is SKY\n        # move downward and laterally in the opposite of the previous lateral direction\n        target = p.n[1-p.direction]\n        #p.direction = -p.direction\n      else if p.n[3.5+(p.direction/2)]?.type is SKY\n        # move horizontally in the previous lateral direction\n        target = p.n[3.5+(p.direction/2)]\n      else if p.n[3.5-(p.direction/2)]?.type is SKY\n        # move horizontally in the opposite of the previous lateral direction\n        target = p.n[3.5-(p.direction/2)]\n        #p.direction = -p.direction\n      else\n        # We're stuck! Don't change at all.\n        p.direction = 0\n        continue\n\n      # count erosion in zones -- note this is not the same as the target's\n      # origin zone (it's color), but where is it *currently* eroding from.\n      if p.x <= 0 then @zone1ErosionCount++ else @zone2ErosionCount++\n\n      if target?\n        target = target.n[1] while target.n[1]?.type is SKY\n        @swapSkyAndLand target, p\n        target.eroded = true\n\n\n      # make sure p becomes sky, whether target exists or not\n      @convertLandToSky p\n\n      # Now, look UP from the patch p (which is now sky) and see if we left a land patch \"hanging\"\n      # above a sky patch. (All land patches are settled on terra firma after each iteration of\n      # this loop, so we need to look upward no more than 1 patch.)\n      @swapSkyAndLand p, p.n[6] if p.n[6]?.type is LAND\n\n  swapSkyAndLand: (sky, land) ->\n    for property in @landPropertyNames.concat(['type', 'color'])\n      [land[property], sky[property]] = [sky[property], land[property]]\n    null\n\n  removeLandProperties: (p) ->\n    p[property] = null for property in @landPropertyNames\n    null\n\n  getBoxAroundPoint: (x, y, xStep, yStep) ->\n    xStep = 3\n    yStep = 5\n\n    # Minimize edge effects by making sure to sample a window of width 2*xStep\n    if x - xStep < @patches.minX\n      leftEdge = @patches.minX\n      rightEdge = leftEdge + 2 * xStep\n    else if x + xStep > @patches.maxX\n      rightEdge = @patches.maxX\n      leftEdge = rightEdge - 2 * xStep\n    else\n      leftEdge  = x - xStep\n      rightEdge = x + xStep\n\n    top       = Math.min y+yStep, @patches.maxY\n    bottom    = Math.max y-yStep, @patches.minY\n\n    [leftEdge, rightEdge, top, bottom]\n\n\n  getLocalSlope: (x, y) ->\n    [leftEdge, rightEdge, top, bottom] = @getBoxAroundPoint x, y, 3, 5\n\n    leftHeight  = bottom\n    rightHeight = bottom\n\n    while leftHeight < top and @patches.patch(leftEdge, leftHeight).type is LAND\n      leftHeight++\n\n    while rightHeight < top and @patches.patch(rightEdge, rightHeight).type is LAND\n      rightHeight++\n\n    slope = (rightHeight - leftHeight) / (rightEdge - leftEdge)\n\n  getLocalVegetation: (x, y) ->\n    [leftEdge, rightEdge, top, bottom] = @getBoxAroundPoint x, y, 5, 5\n\n    vegetation = []\n\n    for x in [leftEdge..rightEdge]\n      for y in [bottom..top]\n        vegetation.push.apply vegetation, @patches.patch(x,y).agents\n\n    vegetation\n\n  resetErosionCounts: ->\n    @zone1ErosionCount = 0\n    @zone2ErosionCount = 0\n\n  setClimate: (c) ->\n    climate = if c isnt \"user\" then climateData[c] else null\n    @updatePrecipitation()\n\n  setUserPrecipitation: (p) ->\n    userPrecipitation = p\n    @precipitation = userPrecipitation unless climate?\n\n  updatePrecipitation: ->\n    if climate\n      @precipitation = climate.precipitation[@month]\n    else\n      @precipitation = userPrecipitation\n\n  getCurrentClimateData: ->\n    if climate\n      climate.precipitation\n    else\n      return (userPrecipitation for i in [0...12])\n\n  topsoilInZones: ->\n    ret = []\n    ret[1] = 0\n    ret[2] = 0\n    count = 0\n    for p in @patches\n      if p.isTopsoil\n        count++\n        if p.x < 0 then ret[1]++ else ret[2]++\n    ret\n\nwindow.ErosionEngine = ErosionEngine\n","SKY_COLOR = [131, 216, 240]\nLIGHT_LAND_COLOR = [135, 79, 49]\nDARK_LAND_COLOR = [105, 49, 19]\nTERRACE_COLOR = [60, 60, 60]\n\nSKY  = \"sky\"\nLAND = \"land\"\n\nclass LandGenerator\n\n  u = ABM.util\n\n  type = \"Plain\"\n  amplitude = -4\n\n  zone1Slope: 0\n  zone2Slope: 0\n\n  landPropertyNames: ['direction', 'eroded', 'zone', 'stability', 'quality', 'isTopsoil', 'isTerrace']\n\n  setupLand: ->\n    for x in [@patches.minX..@patches.maxX]\n      for y in [@patches.minY..@patches.maxY]\n        p = @patches.patch x, y\n        p.zone = if p.x <= 0 then 1 else 2\n\n        # TODO: memoize landShapeFunction when setting up land?\n        if p.y > @landShapeFunction p.x\n          p.color = SKY_COLOR\n          p.type = SKY\n          # help js engine by making sure all patches have the same fields\n          p[property] = null for property in @landPropertyNames\n        else\n          p.isTopsoil = p.y > @landShapeFunction(p.x) - @INITIAL_TOPSOIL_DEPTH\n          p.stability = if p.isTopsoil then 1 else 0.2\n\n          # topsoil and terrace colors will be updated by @updateSurfacePatches\n          p.color = DARK_LAND_COLOR\n          p.type = LAND\n          p.eroded = false\n          p.direction = 0\n          p.quality = 1\n\n          if type is \"Terraced\" and p.x < 0 and\n           ((p.x % Math.floor(@patches.minX/5) is 0 and p.y > @landShapeFunction (p.x-1)) or\n           ((p.x-1) % Math.floor(@patches.minX/5) is 0 and p.y > @landShapeFunction (p.x-2)))\n            p.isTerrace = true\n            p.color = TERRACE_COLOR\n            p.stability = 0.01\n          else\n            p.isTerrace = false\n\n    @updateSurfacePatches()\n\n\n  setLandType: (t) ->\n    type = t\n    switch type\n      when \"Nearly Flat\"  then amplitude = -0.00001\n      when \"Plain\"        then amplitude = -4\n      when \"Rolling\"      then amplitude = -10\n      when \"Hilly\"        then amplitude = -20\n      else                     amplitude = 0\n\n  landShapeFunction: (x) ->\n    if type is \"Terraced\"\n      modelHeight = @patches.maxY - @patches.minY\n      if x < 0\n        step = Math.floor (x+1) / (@patches.minX/5)\n        @patches.minY + modelHeight * (0.6 - (0.1*step))\n      else\n        -25 * Math.sin( u.degToRad(x - 20) ) - 1\n    else if type is \"Sliders\"\n      slope = if x < 0 then @zone1Slope else @zone2Slope\n      slope /= 10\n      midHeight = if (@zone1Slope > 3 and @zone2Slope < -3) then 6 # yes, ugly...\n      else if (@zone1Slope > 2 or @zone2Slope < -2) then 0\n      else if (@zone1Slope < -3 and @zone2Slope > 3) then -22\n      else if (@zone1Slope < -2 or @zone2Slope > 2) then -15\n      else -12\n      val = x * slope + midHeight\n      Math.min @patches.maxY, Math.max @patches.minY, val\n    else\n      amplitude * Math.sin( u.degToRad(x - 10) )\n\nwindow.LandGenerator = LandGenerator","mixOf = (base, mixins...) ->\n  class Mixed extends base\n  for mixin in mixins by -1 #earlier mixins override later ones\n    for name, method of mixin::\n      Mixed::[name] = method\n  Mixed\n\n\nclass LandManagementModel extends mixOf ABM.Model, LandGenerator, ErosionEngine, PlantEngine\n\n  dateString: 'Jan 2013'\n  initialYear: 2013\n  year: 2013\n  month: 0\n  monthLength: 100\n  monthStrings: \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")\n  INITIAL_TOPSOIL_DEPTH: 4\n\n  setup: ->\n    @setFastPatches()\n    @anim.setRate 100, true\n\n    @setCacheAgentsHere()\n    @setupLand()\n    @setupPlants()\n    @draw()\n\n  reset: ->\n    super\n    @setup()\n    @updateDate()\n    @notifyListeners(LandManagementModel.STEP_INTERVAL_ELAPSED)\n    @notifyListeners(LandManagementModel.MONTH_INTERVAL_ELAPSED)\n    @anim.draw()\n\n  step: ->\n    if (@anim.ticks % 20) == 1\n      @updateDate()\n      @notifyListeners(LandManagementModel.STEP_INTERVAL_ELAPSED)\n\n    if (@anim.ticks % @monthLength) == 1\n      @updatePrecipitation()\n      @calculateSoilQuality()\n      @notifyListeners(LandManagementModel.MONTH_INTERVAL_ELAPSED)\n\n    @erode()\n    @updateSurfacePatches()\n    @manageZones()\n    @runPlants()\n\n    if (@anim.ticks % 50) == 1\n      @settlePlants()\n\n  updateDate: ->\n    monthsPassed = Math.floor @anim.ticks/@monthLength\n    @year = @initialYear + Math.floor monthsPassed/12\n    @month = monthsPassed % 12\n\n    @dateString = @monthStrings[@month] + \" \" + @year\n\n  yearTick: ->\n    @anim.ticks % (12 * @monthLength)\n\n  @STEP_INTERVAL_ELAPSED: 'step-interval-elapsed'\n  @MONTH_INTERVAL_ELAPSED: 'month-interval-elapsed'\n\n  notifyListeners: (type) ->\n    $(document).trigger type\n\n\nwindow.LandManagementModel = LandManagementModel\n","require 'src/erosion-engine'\nrequire 'src/plant-engine'\nrequire 'src/land-generator'\nrequire 'src/land-management-model'\nrequire 'src/controls'\n","\nclass PlantEngine\n\n  u = ABM.util\n\n  NORTH = Math.PI/2\n\n  managementPlan = [\"bare\", \"bare\"]\n  intensive = [false, false]\n\n  setupPlants: ->\n    @agentBreeds \"grass trees wheat\"\n\n    @trees.setDefaultShape \"arrow\"\n    @trees.setDefaultColor [0,255,0]\n\n    @addImage \"tree1\", \"tree-1-sprite\", 39, 70\n    @addImage \"tree2\", \"tree-2-sprite\", 29, 80\n    @addImage \"tree3\", \"tree-3-sprite\", 39, 80\n    @addImage \"grass1\", \"grass-1-sprite\", 39, 80\n    @addImage \"grass2\", \"grass-1-sprite\", 39, 80\n    @addImage \"wheat1\", \"wheat-1-sprite\", 39, 80\n\n\n  addImage: (name, id, width, height, scale) ->\n    image = document.getElementById(id)\n    ABM.shapes.add name, false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.globalAlpha = 0.3\n      ctx.drawImage(image, 0, 0)\n\n    ABM.shapes.add \"#{name}-body\", false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.globalAlpha = 0.3\n      ctx.drawImage(image, 0, -height, width*2, height*2, 0, -height, width*2, height*2)\n\n    ABM.shapes.add \"#{name}-root\", false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.globalAlpha = 0.3\n      ctx.drawImage(image, 0, height, width*2, height*2, 0, height, width*2, height*2)\n\n  ###\n    Defines the planting system of the two zones. Zone is defined\n    by index, 0 or 1.\n  ###\n  setZoneManagement: (zone, type) ->\n    previousPlantType = managementPlan[zone]\n    types = type.split \"-\"\n    plantType = types[0]\n    managementPlan[zone] = types[0]\n    intensive[zone] = types[1] is \"intensive\"\n\n    unless @yearTick is 0  # (in which case, manageZones() will handle planting)\n      @plantPlantsInZone(zone) if previousPlantType is \"bare\"\n\n  manageZones: ->\n    if managementPlan.join() is \"bare,bare\" then return\n\n    if @yearTick() is 1\n      @killOffUnwantedPerennials()\n      @plantPlants()\n\n  killOffUnwantedPerennials: ->\n    killList = []\n\n    for a in @agents\n      zone = if a.p?.x <= 0 then 0 else 1\n      if not a.isRoot and not @plantData[a.type]?.annual and a.type isnt managementPlan[zone]\n        console.log \"killing off:\", a\n        killList.push a\n\n    a.die() for a in killList\n\n  isPrecipitationOptimalFor: (type) ->\n    plantData = @plantData[type]\n    plantData.minimumPrecipitation <= @precipitation <= plantData.maximumPrecipitation\n\n  # returns the number of plants (seeds and plant bodies, but not detached roots) in zone\n  plantPopulationInZone: (zone) ->\n    @agents.reduce ((x, a) => if @isAgentAPlantInZone(a, zone) then x + 1 else x), 0\n\n  adjustPlantPopulationInZone: (zone) ->\n    killList = []\n    plantType = managementPlan[zone]\n\n    return if not @plantData[plantType]?.isAffectedByPoorWaterAfterPlanting\n\n    actualPopulation = @plantPopulationInZone zone\n    populationIfOptimalPrecipitation = @plantData[plantType].quantity\n\n    if @isPrecipitationOptimalFor managementPlan[zone]\n      # add actualPopulation seeds\n      if actualPopulation < populationIfOptimalPrecipitation then @plantPlantsInZone zone\n    else\n      if actualPopulation is populationIfOptimalPrecipitation\n        # need to kill off some plants\n        for a in @agents\n          if @isAgentAPlantInZone(a, zone) and u.randomFloat(1) < @plantData[plantType].mortalityInPoorWater\n            console.log \"killing off (poor water):\", a\n            killList.push(a)\n\n    for a in killList\n      # split into roots and body, unless already split\n      if not a.isBody then @splitRoots(a)\n      a.die()\n\n  isAgentAPlantInZone: (a, zone) ->\n    if zone is 0\n      a.x <= 0 and not a.isRoot\n    else\n      a.x > 0 and not a.isRoot\n\n  plantPlantsInZone: (zone) ->\n    zoneWidth = @patches.maxX\n    plantType = managementPlan[zone]\n\n    return if plantType is \"bare\"\n\n    # Wait to next year to plant if last germination date has passed for this year.\n    return if @yearTick() > @plantData[plantType].maxGermination\n\n    # OK, we're planting:\n    desiredPopulation  = @plantData[plantType].quantity\n    # note that currently, we kill off undesired plants before planting something new, so there\n    # should be no reason to check that the plants are the desired type\n    actualPopulation = @plantPopulationInZone zone\n\n    sign = zone * 2 - 1      # -1, 1\n    inRows = @plantData[plantType].inRows\n\n    plantAt = (x) =>\n      patch = @surfaceLand[zoneWidth + x]     # surface patch with given x coordinate\n      @plantSeed plantType, patch\n\n    if inRows and actualPopulation is 0\n      for i in [0...desiredPopulation]\n        plantAt sign * Math.floor (i + 1) * zoneWidth / (desiredPopulation+1)\n    else if not inRows\n      for i in [actualPopulation...desiredPopulation]\n        console.log \"planting\"\n        plantAt sign * u.randomInt zoneWidth\n\n  plantPlants: ->\n    @plantPlantsInZone(zone) for zone in [0, 1]\n    null\n\n  plantSeed: (type, patch) ->\n    data = @plantData[type]\n    patch.sprout 1, @[type], (a) =>\n      a.size = data.initialSize\n      a.type = type\n      a.shape = u.oneOf data.shapes\n      a.isSeed = true\n      a.dying = false\n      a.germinationDate = u.randomInt2 Math.max(@yearTick()+1, data.minGermination), data.maxGermination\n      v = data.periodVariation\n      a.growthPeriods = (p + (p*u.randomFloat2(-v, v)) for p in data.growthPeriods)\n      a.growthRates = data.growthRates\n      a.period = 0\n      a.periodAge = 0\n\n  runPlants: ->\n    killList = []\n\n    @adjustPlantPopulationInZone(zone) for zone in [0, 1]\n\n    for a in @agents\n      poorWater = not @isPrecipitationOptimalFor a.type\n\n      if a.isSeed\n        # try to germinate on germination date. If we're annual and there isn't enough\n        # water, we grow fewer plants. If we're not annual, push back germination date\n        if @yearTick() is a.germinationDate\n          if poorWater\n            if u.randomFloat(1) < @plantData[a.type].mortalityInPoorWater\n              killList.push a\n            else if not @plantData[a.type].annual\n              a.germinationDate += 40\n            continue\n          a.isSeed = false\n      else\n        a.periodAge++\n        if a.periodAge > a.growthPeriods[a.period]\n          a.period++\n          a.periodAge = 0\n\n          switch a.period\n            when 3\n              @splitRoots a unless a.isRoot or a.growthPeriods[a.period] is Infinity\n            when 4\n              if not @plantData[a.type].annual and not a.isRoot\n                #reseed\n                xModifier = if a.x <= 0 then -1 else 1\n                patch = @surfaceLand[@patches.maxX + (u.randomInt(@patches.maxX) * xModifier)]\n                @plantSeed a.type, patch\n            when 5\n              kill = false\n              if not a.isRoot\n                kill = true\n              else\n                if a.type is \"wheat\"\n                  zone = if a.x <= 0 then 0 else 1\n                  if not intensive[zone] and u.randomFloat(1) < 0.2\n                    kill = true\n                  if intensive[zone] and u.randomFloat(1) < 0.85\n                    kill = true\n                else if u.randomFloat(1) < 0.5 then kill = true\n\n              if kill\n                killList.push a\n                continue\n\n              a.period = 0\n\n        growthRate = a.growthRates[a.period] * @topsoilRateFactor(a)\n        if poorWater then growthRate *= 0.85\n\n        a.size *= (growthRate + 1)\n\n        if a.size <= 0 then killList.push a\n\n    a.die() for a in killList\n\n\n  # Returns a factor in the range [0.7, 1] that is proportional to the fraction of current topsoil\n  # depth below the plant agent to the initial topsoil depth. Returns 1 if the current topsoil depth\n  # is as deep or deeper then the initial topsoil depth.\n\n  # Note that, for wheat, a reduction in the daily growth rate by a factor of 0.7 results in a\n  # maximum size that is 1/2 that of wheat without a reduced growth rate\n  topsoilRateFactor: (agent) ->\n    [x, y] = [agent.p.x, agent.p.y]\n    topsoilDepth = 0\n    topsoilDepth++ while @patches.patch(x, y - topsoilDepth).isTopsoil\n\n    0.3 * Math.min(topsoilDepth, @INITIAL_TOPSOIL_DEPTH) / @INITIAL_TOPSOIL_DEPTH + 0.7\n\n  splitRoots: (plant) ->\n    plant.p.sprout 1, @[plant.type], (root) =>\n      root.size = plant.size\n      root.type = plant.type\n      root.shape = plant.shape + \"-root\"\n      root.isSeed = false\n      root.isRoot = true\n      root.growthPeriods = plant.growthPeriods\n      root.growthRates = @plantData[plant.type].rootGrowthRates\n      root.period = plant.period\n      root.periodAge = 0\n    plant.isBody = true\n    plant.shape = plant.shape + \"-body\"\n\n  # check if we need plants to settle due to ground eroding beneath them\n  settlePlants: ->\n    zoneWidth = @patches.maxX\n    for a in @agents\n      surfacePatch = @surfaceLand[zoneWidth + a.x]\n      if surfacePatch.y < (a.y - 1)\n        a.setXY a.x, a.y-0.2\n\n  soilQuality: [1, 1]\n\n  calculateSoilQuality: ->\n    for zone in [0..1]\n      quality = @soilQuality[zone]\n      if managementPlan[zone] is \"wheat\"\n        if intensive[zone] then quality -= 0.02\n        else quality += 0.02\n        quality = Math.max(Math.min(quality, 2), 0)\n      @soilQuality[zone] = quality\n\n  plantData:\n    trees:\n      quantity: 19\n      inRows: false\n      annual: false\n      minGermination: 100\n      maxGermination: 1200\n      initialSize: 0.4\n      growthPeriods: [100, 1800, 4800, 1300, 1200]\n      growthRates: [0.00042, 0.00116,  0.00003, -0.00018, -0.00019]\n      rootGrowthRates: [0, -0.0005, 0, -0.0005, -0.0005]\n      periodVariation: 0.22\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      isAffectedByPoorWaterAfterPlanting: false\n      mortalityInPoorWater: 0.15\n      shapes: [\"tree1\", \"tree2\", \"tree3\"]\n    grass:\n      quantity: 33\n      inRows: false\n      annual: false\n      initialSize: 0.2\n      minGermination: 1\n      maxGermination: 800\n      rootGrowthRates: [0, -0.001, 0, -0.001, -0.001]\n      growthPeriods: [120, 210, 1400, Infinity, Infinity]\n      growthRates: [0.0043, 0.0053,  0.0003, 0, 0]\n      periodVariation: 0.15\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      isAffectedByPoorWaterAfterPlanting: true\n      mortalityInPoorWater: 0.15\n      shapes: [\"grass1\", \"grass2\"]\n    wheat:\n      quantity: 19\n      inRows: true\n      annual: true\n      initialSize: 0.2\n      minGermination: 60\n      maxGermination: 90\n      growthPeriods: [120, 210, 350, 100, 100]\n      growthRates: [0.0049,  0.0061,  0.0008,  0.0003, -0.0027]\n      rootGrowthRates: [0, 0, 0, -0.001, -0.001]\n      periodVariation: 0.04\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      isAffectedByPoorWaterAfterPlanting: false\n      mortalityInPoorWater: 0.5\n      shapes: [\"wheat1\"]\n\nwindow.PlantEngine = PlantEngine\n"]}