{"version":3,"file":"public/javascripts/app.js","sources":["app/src/controls.coffee","app/src/erosion-engine.coffee","app/src/land-generator.coffee","app/src/land-management-model.coffee","app/src/main.coffee","app/src/plant-engine.coffee"],"names":[],"mappings":"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","sourcesContent":["$precipitationSlider = $ \"#precipitation-slider\"\n$precipitationSliderDiv = $ \"#user-precipitation\"\n$zone1Slider = $ \"#zone-1-slider\"\n$zone2Slider = $ \"#zone-2-slider\"\n$slopeSlidersDiv = $ \"#slope-sliders\"\nerosionGraph = null\ntopsoilCountGraph = null\nzone1Planting = \"\"\nzone2Planting = \"\"\n\n\n\nenableZoneSliders = (enable) ->\n  $zone1Slider.slider if enable then \"enable\" else \"disable\"\n  $zone2Slider.slider if enable then \"enable\" else \"disable\"\n  if enable then $slopeSlidersDiv.removeClass \"disabled\" else $slopeSlidersDiv.addClass \"disabled\"\n\nupdatePrecipitationBarchart = (data) ->\n  $(\".inner-bar\").each (i) ->\n    $this = $(this)\n    precip = data[i]\n    normalized = precip / 500\n    height = 55 * normalized\n    margin = 55 - height\n    $this.stop true\n    $this.animate height: height, marginTop: margin, alt: height\n    $this.parent().attr({title: precip})\n\n$ ->\n  $(\"button\").button()\n  $(\"#playback\").buttonset()\n  $(\".icon-pause\").hide()\n  $(\".chosen-select\").chosen\n    disable_search:true\n    width: 158\n  $precipitationSlider.slider  min: 0, max: 500, step: 1, value: 166\n  $zone1Slider.slider  min: -5, max: 5, step: 1, value: 0\n  $zone2Slider.slider  min: -5, max: 5, step: 1, value: 0\n\n  enableZoneSliders false\n  $precipitationSlider.slider(\"disable\")\n\n\n\nwindow.initControls = ->\n  $('#date-string').text(model.dateString)\n  setupGraphs()\n  updatePrecipitationBarchart model.getCurrentClimateData()\n\nreset = ->\n  model.stop()\n  $(\".icon-pause\").hide()\n  $(\".icon-play\").show()\n  model.reset()\n  erosionGraph.reset() if erosionGraph?\n  topsoilCountGraph.reset() if topsoilCountGraph?\n\n$('#play-pause-button').click ->\n  if model.anim.animStop\n    model.start()\n    $(\".icon-pause\").show()\n    $(\".icon-play\").hide()\n  else\n    model.stop()\n    $(\".icon-pause\").hide()\n    $(\".icon-play\").show()\n\n$('#reset-button').click reset\n\n\n$(\"#terrain-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setLandType selection\n  reset()\n\n  enableZoneSliders(selection is \"Sliders\")\n\n$(\"#zone1-planting-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setZoneManagement 0, selection\n\n  reset() unless ~selection.indexOf(\"wheat\") && ~zone1Planting.indexOf(\"wheat\")\n  zone1Planting = selection\n\n$(\"#zone2-planting-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setZoneManagement 1, selection\n\n  reset() unless ~selection.indexOf(\"wheat\") && ~zone2Planting.indexOf(\"wheat\")\n  zone2Planting = selection\n\n$precipitationSlider.on 'slide', (event, ui) ->\n  model.setUserPrecipitation ui.value\n  updatePrecipitationBarchart model.getCurrentClimateData()\n  $(\"#precipitation-value\").text model.precipitation\n\n$(\"#climate-options\").change (evt, ui) ->\n  selection = ui.selected\n  model.setClimate selection\n  enable = selection is \"user\"\n  $precipitationSlider.slider if enable then \"enable\" else \"disable\"\n  if enable then $precipitationSliderDiv.removeClass \"disabled\" else $precipitationSliderDiv.addClass \"disabled\"\n\n  updatePrecipitationBarchart model.getCurrentClimateData()\n  $(\"#precipitation-value\").text model.precipitation\n\n$zone1Slider.on 'slide', (event, ui) ->\n  model.zone1Slope = ui.value\n  reset()\n\n$zone2Slider.on 'slide', (event, ui) ->\n  model.zone2Slope = ui.value\n  reset()\n\n$('input.property').click ->\n  $this    = $(this)\n  property = $this.attr('id')\n  checked  = $this.is(':checked')\n  model[property] = checked\n  true\n\nsetupGraphs = ->\n  if $('#erosion-graph').length\n\n    erosionGraph = LabGrapher('#erosion-graph',\n      title:  \"Erosion Rates\"\n      xlabel: \"Time (year)\"\n      ylabel: \"Monthly Erosion\"\n      xmax:   2020\n      xmin:   2013\n      ymax:   100\n      ymin:   0\n      xTickCount: 4\n      yTickCount: 5\n      xFormatter: \"d\"\n      dataSampleStart: 2013\n      sampleInterval: 1/60\n      realTime: true\n      fontScaleRelativeToParent: true\n      dataColors: [\n        [160,   0,   0],\n        [ 44, 160,   0],\n        [ 44,   0, 160],\n        [  0,   0,   0],\n        [255, 127,   0],\n        [255,   0, 255]]\n    )\n\n  if $('#topsoil-count-graph').length\n    topsoilCountGraph = LabGrapher('#topsoil-count-graph',\n      title:  \"Amount of Topsoil in Zone\"\n      xlabel: \"Time (year)\"\n      ylabel: \"Amount of Topsoil\"\n      xmax:   2020\n      xmin:   2013\n      ymax:   1000\n      ymin:   0\n      xTickCount: 4\n      yTickCount: 5\n      xFormatter: \"d\"\n      dataSampleStart: 2013\n      sampleInterval: 1/60\n      realTime: true\n      fontScaleRelativeToParent: true\n      dataColors: [\n        [160,   0,   0],\n        [ 44, 160,   0],\n        [ 44,   0, 160],\n        [  0,   0,   0],\n        [255, 127,   0],\n        [255,   0, 255]]\n    )\n\n$(document).on LandManagementModel.STEP_INTERVAL_ELAPSED, ->\n  $('#date-string').text(model.dateString)\n  if erosionGraph then erosionGraph.addSamples [0,0,0,0,model.zone1ErosionCount, model.zone2ErosionCount]\n  model.resetErosionCounts()\n  if topsoilCountGraph\n    topsoilInZone = model.topsoilInZones()\n    topsoilCountGraph.addSamples [0, 0, 0, 0, topsoilInZone[1], topsoilInZone[2]]\n\n\n$(document).on LandManagementModel.STEP_INTERVAL_ELAPSED, ->\n  $(\".inner-bar\").removeClass \"current-month\"\n  $($(\".inner-bar\")[model.month]).addClass \"current-month\"\n  $(\"#precipitation-value\").text model.precipitation\n","SKY_COLOR = [131, 216, 240]\n\nLIGHT_LAND_COLOR = [135, 79, 49]\nDARK_LAND_COLOR = [105, 49, 19]\nTERRACE_COLOR = [60, 60, 60]\n\nGOOD_SOIL_COLOR = [88, 41, 10]\nPOOR_SOIL_COLOR = [193, 114, 7]\n\nMAGENTA = [255, 0, 255]\nORANGE = [255, 127, 0]\n\nSKY  = \"sky\"\nLAND = \"land\"\n\nclass ErosionEngine\n\n  u = ABM.util\n\n  climateData = {\n    temperate: {\n      precipitation: [22, 26, 43, 73, 108, 115, 89, 93, 95, 58, 36, 27]\n    },\n    tropical: {\n      precipitation: [200, 290, 380, 360, 280, 120, 80, 40, 30, 30, 70, 100]\n    },\n    arid: {\n      precipitation: [11.4, 13.2, 23.5, 8.8, 14.8, 34.1, 133.1, 120.2, 47, 7.8, 7.7, 6.8]\n    }\n  }\n  climate = climateData.temperate\n  userPrecipitation = 166\n\n  precipitation: 0\n\n  erosionProbability = 30\n  maxSlope = 2 # necessary?\n  showErosion: true\n\n  zone1ErosionCount: 0\n  zone2ErosionCount: 0\n\n  showSoilQuality: false\n\n  findSurfaceLandPatches: ->\n    surfaceLand = []\n    for x in [@patches.minX..@patches.maxX]\n      y = @patches.maxY\n      y-- while @patches.patch(x, y).type is SKY\n      surfaceLand.push @patches.patch x, y\n\n    surfaceLand\n\n  # Called every tick to modify colors of surface-most INITIAL_TOPSOIL_DEPTH patches.\n  # (A reasonable assumption is made that the patches that change during a tick are no more than\n  # INITIAL_TOPSOIL_DEPTH deeper the land-sky boundary. Hower, we must process at least that depth\n  # because the land generator relies on this method for the initial setup of the topsoil patches.)\n  updateSurfacePatches: ->\n    @surfaceLand = @findSurfaceLandPatches()\n\n    for surfacePatch in @surfaceLand\n      [x, y] = [surfacePatch.x, surfacePatch.y]\n\n      for i in [0...@INITIAL_TOPSOIL_DEPTH]\n        p = @patches.patch x, y - i\n        newColor =\n          if p.isTerrace\n            TERRACE_COLOR\n          else if p.isTopsoil\n            if @showErosion and p.eroded\n              if p.zone is 1 then ORANGE else MAGENTA\n            else if @showSoilQuality\n              zone = if p.x <= 0 then 0 else 1\n              if p.quality < @soilQuality[zone] then p.quality += 0.001\n              if p.quality > @soilQuality[zone] then p.quality -= 0.001\n\n              if p.quality < 0.5\n                POOR_SOIL_COLOR\n              else if p.quality > 1.5\n                GOOD_SOIL_COLOR\n              else\n                LIGHT_LAND_COLOR\n            else\n              LIGHT_LAND_COLOR\n        if newColor? then p.color = newColor\n\n  erode: ->\n    savedProperies = {}\n\n    # Find and sort the surface patches most exposed to the sky\n    for p in @surfaceLand\n      p.skyCount = 0\n      p.skyCount++ for n in p.n when n?.type is SKY\n      p.skyCount += 3 if p.y is @patches.maxY\n\n    @surfaceLand.sort (a,b) ->\n      return if a.skyCount <= b.skyCount then 1 else -1\n\n    # Take the top 25% of most exposed soil patches and erode them\n    for i in [0...@surfaceLand.length/2] by 1\n      p = @surfaceLand[i]\n\n      localSlope = @getLocalSlope p.x, p.y\n      slopeContribution = 0.35 * Math.abs(localSlope/2)\n      vegetation = @getLocalVegetation p.x, p.y\n      totalVegetationSize = 0\n      totalVegetationSize += (if a.isBody then a.size/3 else if a.isRoot then a.size*2/3 else a.size) for a in vegetation\n      vegetationStoppingPower = Math.min totalVegetationSize/5, 0.99\n      vegetiationContribution = 0.65 * (1 - vegetationStoppingPower)\n      localErosionProbability = erosionProbability / p.stability\n      probabilityOfErosion = localErosionProbability * (@precipitation/400) * (slopeContribution + vegetiationContribution)\n\n      if (u.randomFloat(100) > probabilityOfErosion) then continue\n\n      # pick a random direction first, then check\n      # bottom corners, then sides for a patch of sky\n      direction = p.direction or direction = 1 - (u.randomInt(2) * 2)\n\n      # remember, indices into p.n relative to patch p (in the center of the below diagram):\n      # 5  6  7\n      # 3  -  4\n      # 0  1  2\n\n      if p.x is @patches.minX and direction is -1 or p.x is @patches.maxX and direction is 1\n        # We're moving off the edge, so disappear (no target)\n        target = null\n      else if p.n[1+direction]?.type is SKY\n        # move downward and in the previous lateral direction\n        target = p.n[1+direction]\n      else if p.n[1-direction]?.type is SKY\n        # move downward and laterally in the opposite of the previous lateral direction\n        target = p.n[1-direction]\n        direction = direction * -1\n      else if p.n[3.5+(direction/2)]?.type is SKY\n        # move horizontally in the previous lateral direction\n        target = p.n[3.5+(direction/2)]\n      else if p.n[3.5-(direction/2)]?.type is SKY\n        # move horizontally in the opposite of the previous lateral direction\n        target = p.n[3.5-(direction/2)]\n        direction = direction * -1\n      else\n        # We're stuck! Don't change at all.\n        p.direction = 0\n        continue\n\n      # count erosion in zones -- note this is not the same as the target's\n      # origin zone (it's color), but where is it *currently* eroding from.\n      if p.x < 0 then @zone1ErosionCount++ else @zone2ErosionCount++\n\n      # unless we're disappearing off the edge, \"move\" to target by making target a clone of p\n      if target?\n       # first, check below target to make sure it drops down to solid ground\n        while target.n[1].type is SKY\n          target = target.n[1]\n\n        # 'move' p to target by cloning the land-related properties of p\n        target.type = LAND\n        target.eroded = true\n        target[property] = p[property] for property in ['direction', 'zone', 'stability', 'quality', 'isTopsoil', 'isTerrace']\n\n      # become sky\n      p.type = SKY\n      p.color = SKY_COLOR\n      p[property] = undefined for property in ['eroded', 'direction', 'zone', 'stability', 'quality', 'isTopsoil', 'isTerrace']\n\n\n  getBoxAroundPoint: (x, y, xStep, yStep) ->\n    xStep = 3\n    yStep = 5\n\n    leftEdge  = Math.max x-xStep, @patches.minX\n    rightEdge = Math.min x+xStep, @patches.maxX\n    top       = Math.min y+yStep, @patches.maxY\n    bottom    = Math.max y-yStep, @patches.minY\n    [leftEdge, rightEdge, top, bottom]\n\n\n  getLocalSlope: (x, y) ->\n    [leftEdge, rightEdge, top, bottom] = @getBoxAroundPoint x, y, 3, 5\n\n    leftHeight  = bottom\n    rightHeight = bottom\n\n    while leftHeight < top and @patches.patch(leftEdge, leftHeight).type is LAND\n      leftHeight++\n\n    while rightHeight < top and @patches.patch(rightEdge, rightHeight).type is LAND\n      rightHeight++\n\n    slope = (rightHeight - leftHeight) / (rightEdge - leftEdge)\n\n  getLocalVegetation: (x, y) ->\n    [leftEdge, rightEdge, top, bottom] = @getBoxAroundPoint x, y, 5, 5\n\n    vegetation = []\n\n    for x in [leftEdge..rightEdge]\n      for y in [bottom..top]\n        vegetation.push.apply vegetation, @patches.patch(x,y).agents\n\n    vegetation\n\n  resetErosionCounts: ->\n    @zone1ErosionCount = 0\n    @zone2ErosionCount = 0\n\n  setClimate: (c) ->\n    climate = if c isnt \"user\" then climateData[c] else null\n    @updatePrecipitation()\n\n  setUserPrecipitation: (p) ->\n    userPrecipitation = p\n    @precipitation = userPrecipitation unless climate?\n\n  updatePrecipitation: ->\n    if climate\n      @precipitation = climate.precipitation[@month]\n    else\n      @precipitation = userPrecipitation\n\n  getCurrentClimateData: ->\n    if climate\n      climate.precipitation\n    else\n      return (userPrecipitation for i in [0...12])\n\n  topsoilInZones: ->\n    ret = []\n    ret[1] = 0\n    ret[2] = 0\n    count = 0\n    for p in @patches\n      if p.isTopsoil\n        count++\n        if p.x < 0 then ret[1]++ else ret[2]++\n    console.log count\n    ret\n\nwindow.ErosionEngine = ErosionEngine\n","SKY_COLOR = [131, 216, 240]\nLIGHT_LAND_COLOR = [135, 79, 49]\nDARK_LAND_COLOR = [105, 49, 19]\nTERRACE_COLOR = [60, 60, 60]\n\nSKY  = \"sky\"\nLAND = \"land\"\n\nclass LandGenerator\n\n  u = ABM.util\n\n  type = \"Plain\"\n  amplitude = -4\n\n  zone1Slope: 0\n  zone2Slope: 0\n\n  setupLand: ->\n    for x in [@patches.minX..@patches.maxX]\n      for y in [@patches.minY..@patches.maxY]\n        p = @patches.patch x, y\n        p.zone = if p.x <= 0 then 1 else 2\n\n        # TODO: memoize landShapeFunction when setting up land?\n        if p.y > @landShapeFunction p.x\n          p.color = SKY_COLOR\n          p.type = SKY\n        else\n          p.isTopsoil = p.y > @landShapeFunction(p.x) - @INITIAL_TOPSOIL_DEPTH\n          p.stability = if p.isTopsoil then 1 else 10  # TODO: higher values are less stable! Reverse.\n\n          # topsoil and terrace colors will be updated by @updateSurfacePatches\n          p.color = DARK_LAND_COLOR\n          p.type = LAND\n          p.eroded = false\n          p.erosionDirection = 0\n          p.quality = 1\n\n          if type is \"Terraced\" and p.x < 0 and\n           ((p.x % Math.floor(@patches.minX/5) is 0 and p.y > @landShapeFunction (p.x-1)) or\n           ((p.x-1) % Math.floor(@patches.minX/5) is 0 and p.y > @landShapeFunction (p.x-2)))\n            p.isTerrace = true\n            p.color = TERRACE_COLOR\n            p.stability = 100\n\n    @updateSurfacePatches()\n\n\n  setLandType: (t) ->\n    type = t\n    switch type\n      when \"Nearly Flat\"  then amplitude = -0.00001\n      when \"Plain\"        then amplitude = -4\n      when \"Rolling\"      then amplitude = -10\n      when \"Hilly\"        then amplitude = -20\n      else                     amplitude = 0\n\n  landShapeFunction: (x) ->\n    if type is \"Terraced\"\n      modelHeight = @patches.maxY - @patches.minY\n      if x < 0\n        step = Math.floor (x+1) / (@patches.minX/5)\n        @patches.minY + modelHeight * (0.6 - (0.1*step))\n      else\n        -25 * Math.sin( u.degToRad(x - 20) ) - 1\n    else if type is \"Sliders\"\n      slope = if x < 0 then @zone1Slope else @zone2Slope\n      slope /= 10\n      midHeight = if (@zone1Slope > 3 and @zone2Slope < -3) then 6 # yes, ugly...\n      else if (@zone1Slope > 2 or @zone2Slope < -2) then 0\n      else if (@zone1Slope < -3 and @zone2Slope > 3) then -22\n      else if (@zone1Slope < -2 or @zone2Slope > 2) then -15\n      else -12\n      val = x * slope + midHeight\n      Math.min @patches.maxY, Math.max @patches.minY, val\n    else\n      amplitude * Math.sin( u.degToRad(x - 10) )\n\nwindow.LandGenerator = LandGenerator","mixOf = (base, mixins...) ->\n  class Mixed extends base\n  for mixin in mixins by -1 #earlier mixins override later ones\n    for name, method of mixin::\n      Mixed::[name] = method\n  Mixed\n\n\nclass LandManagementModel extends mixOf ABM.Model, LandGenerator, ErosionEngine, PlantEngine\n\n  dateString: 'Jan 2013'\n  initialYear: 2013\n  year: 2013\n  month: 0\n  monthLength: 100\n  monthStrings: \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")\n  INITIAL_TOPSOIL_DEPTH: 4\n\n  setup: ->\n    @setFastPatches()\n    @anim.setRate 100, true\n\n    @yearTick = 0\n\n    @setCacheAgentsHere()\n    @setupLand()\n    @setupPlants()\n    @draw()\n\n  reset: ->\n    super\n    @setup()\n    @updateDate()\n    @notifyListeners(LandManagementModel.STEP_INTERVAL_ELAPSED)\n    @notifyListeners(LandManagementModel.MONTH_INTERVAL_ELAPSED)\n    @anim.draw()\n\n  step: ->\n    if (@anim.ticks % 20) == 1\n      @updateDate()\n      @notifyListeners(LandManagementModel.STEP_INTERVAL_ELAPSED)\n\n    if (@anim.ticks % @monthLength) == 1\n      @updatePrecipitation()\n      @calculateSoilQuality()\n      @notifyListeners(LandManagementModel.MONTH_INTERVAL_ELAPSED)\n\n    @erode()\n    @updateSurfacePatches()\n    @manageZones()\n    @runPlants()\n\n    if (@anim.ticks % 50) == 1\n      @settlePlants()\n\n  updateDate: ->\n    monthsPassed = Math.floor @anim.ticks/@monthLength\n    @year = @initialYear + Math.floor monthsPassed/12\n    @month = monthsPassed % 12\n\n    @dateString = @monthStrings[@month] + \" \" + @year\n\n  @STEP_INTERVAL_ELAPSED: 'step-interval-elapsed'\n  @MONTH_INTERVAL_ELAPSED: 'month-interval-elapsed'\n\n  notifyListeners: (type) ->\n    $(document).trigger type\n\n\nwindow.LandManagementModel = LandManagementModel\n","require 'src/erosion-engine'\nrequire 'src/plant-engine'\nrequire 'src/land-generator'\nrequire 'src/land-management-model'\nrequire 'src/controls'\n","\nclass PlantEngine\n\n  u = ABM.util\n\n  NORTH = Math.PI/2\n\n  managementPlan = [\"bare\", \"bare\"]\n  intensive = [false, false]\n\n  setupPlants: ->\n    @agentBreeds \"grass trees wheat\"\n\n    @trees.setDefaultShape \"arrow\"\n    @trees.setDefaultColor [0,255,0]\n\n    @addImage \"tree1\", \"tree-1-sprite\", 39, 70\n    @addImage \"tree2\", \"tree-2-sprite\", 29, 80\n    @addImage \"tree3\", \"tree-3-sprite\", 39, 80\n    @addImage \"grass1\", \"grass-1-sprite\", 39, 80\n    @addImage \"grass2\", \"grass-1-sprite\", 39, 80\n    @addImage \"wheat1\", \"wheat-1-sprite\", 39, 80\n\n  addImage: (name, id, width, height, scale) ->\n    image = document.getElementById(id)\n    ABM.shapes.add name, false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.drawImage(image, 0, 0)\n\n    ABM.shapes.add \"#{name}-body\", false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.drawImage(image, 0, -height, width*2, height*2, 0, -height, width*2, height*2)\n\n    ABM.shapes.add \"#{name}-root\", false, (ctx)=>\n      ctx.scale(-0.1, 0.1);\n      ctx.translate(width,height)\n      ctx.rotate Math.PI\n      ctx.drawImage(image, 0, height, width*2, height*2, 0, height, width*2, height*2)\n\n  ###\n    Defines the planting system of the two zones. Zone is defined\n    by index, 0 or 1.\n  ###\n  setZoneManagement: (zone, type) ->\n    types = type.split \"-\"\n    managementPlan[zone] = types[0]\n    intensive[zone] = types[1] is \"intensive\"\n\n  manageZones: ->\n    if managementPlan.join() is \"bare,bare\" then return\n\n    @yearTick = @anim.ticks % (12 * @monthLength)\n\n    if @yearTick is 1\n      @plantPlants()\n\n  plantPlants: ->\n    zoneWidth = @patches.maxX\n\n    for zone in [0, 1]\n      plantType = managementPlan[zone]\n      continue if plantType is \"bare\"\n      continue if @anim.ticks > (12 * @monthLength) and not @plantData[plantType].annual\n\n      quantity  = @plantData[plantType].quantity\n      inRows    = @plantData[plantType].inRows\n      xModifier = zone*2 - 1      # -1, 1\n\n      for i in [0...quantity]\n        x = if inRows then Math.floor((i+1) * zoneWidth/(quantity+1)) else u.randomInt(zoneWidth)\n        x *= xModifier\n        patch = @surfaceLand[zoneWidth + x]     # find surface patch with x coord\n\n        @plantSeed plantType, patch\n\n  plantSeed: (type, patch) ->\n    data = @plantData[type]\n    patch.sprout 1, @[type], (a) =>\n      a.size = @plantData[type].initialSize\n      a.type = type\n      a.shape = u.oneOf data.shapes\n      a.isSeed = true\n      a.dying = false\n      a.germinationDate = u.randomInt2 data.minGermination, data.maxGermination\n      v = data.periodVariation\n      a.growthPeriods = (p + (p*u.randomFloat2(-v, v)) for p in data.growthPeriods)\n      a.growthRates = data.growthRates\n      a.period = 0\n      a.periodAge = 0\n\n  runPlants: ->\n    killList = []\n\n    for a in @agents\n      poorWater = @precipitation < @plantData[a.type].minimumPrecipitation or\n                  @precipitation > @plantData[a.type].maximumPrecipitation\n      if a.isSeed\n        # try to germinate on germination date. If we're annual and there isn't enough\n        # water, we grow fewer plants. If we're not annual, push back germination date\n        if @yearTick is a.germinationDate\n          if poorWater and @plantData[a.type].annual\n            if u.randomFloat(1) < 0.5\n              killList.push a\n              continue\n          else if poorWater and not @plantData[a.type].annual\n            if u.randomFloat(1) < 0.15\n              killList.push a\n            else\n              a.germinationDate += 40\n            continue\n          a.isSeed = false\n      else\n        a.periodAge++\n        if a.periodAge > a.growthPeriods[a.period]\n          a.period++\n          a.periodAge = 0\n\n          switch a.period\n            when 3\n              @splitRoots a unless a.isRoot\n            when 4\n              if not @plantData[a.type].annual and not a.isRoot\n                #reseed\n                xModifier = if a.x <= 0 then -1 else 1\n                patch = @surfaceLand[@patches.maxX + (u.randomInt(@patches.maxX) * xModifier)]\n                @plantSeed a.type, patch\n            when 5\n              kill = false\n              if not a.isRoot\n                kill = true\n              else\n                if a.type is \"wheat\"\n                  zone = if a.x <= 0 then 0 else 1\n                  if not intensive[zone] and u.randomFloat(1) < 0.2\n                    kill = true\n                  if intensive[zone] and u.randomFloat(1) < 0.85\n                    kill = true\n                else if u.randomFloat(1) < 0.5 then kill = true\n\n              if kill\n                killList.push a\n                continue\n\n              a.period = 0\n\n        growthRate = a.growthRates[a.period] * @topsoilRateFactor(a)\n        if poorWater then growthRate *= 0.85\n\n        a.size *= (growthRate + 1)\n\n        if a.size <= 0 then killList.push a\n\n    a.die() for a in killList\n\n\n  # Returns a factor in the range [0.7, 1] that is proportional to the fraction of current topsoil\n  # depth below the plant agent to the initial topsoil depth. Returns 1 if the current topsoil depth\n  # is as deep or deeper then the initial topsoil depth.\n\n  # Note that, for wheat, a reduction in the daily growth rate by a factor of 0.7 results in a\n  # maximum size that is 1/2 that of wheat without a reduced growth rate\n  topsoilRateFactor: (agent) ->\n    [x, y] = [agent.p.x, agent.p.y]\n    topsoilDepth = 0\n    topsoilDepth++ while @patches.patch(x, y - topsoilDepth).isTopsoil\n\n    0.3 * Math.min(topsoilDepth, @INITIAL_TOPSOIL_DEPTH) / @INITIAL_TOPSOIL_DEPTH + 0.7\n\n  splitRoots: (plant) ->\n    plant.p.sprout 1, @[plant.type], (root) =>\n      root.size = plant.size\n      root.type = plant.type\n      root.shape = plant.shape + \"-root\"\n      root.isSeed = false\n      root.isRoot = true\n      root.growthPeriods = plant.growthPeriods\n      root.growthRates = @plantData[plant.type].rootGrowthRates\n      root.period = plant.period\n      root.periodAge = 0\n    plant.isBody = true\n    plant.shape = plant.shape + \"-body\"\n\n  # check if we need plants to settle due to ground eroding beneath them\n  settlePlants: ->\n    zoneWidth = @patches.maxX\n    for a in @agents\n      surfacePatch = @surfaceLand[zoneWidth + a.x]\n      if surfacePatch.y < (a.y - 1)\n        a.setXY a.x, a.y-0.2\n\n  soilQuality: [1, 1]\n\n  calculateSoilQuality: ->\n    for zone in [0..1]\n      quality = @soilQuality[zone]\n      if managementPlan[zone] is \"wheat\"\n        if intensive[zone] then quality -= 0.02\n        else quality += 0.02\n        quality = Math.max(Math.min(quality, 2), 0)\n      @soilQuality[zone] = quality\n\n  plantData:\n    trees:\n      quantity: 19\n      inRows: false\n      annual: false\n      minGermination: 100\n      maxGermination: 1200\n      initialSize: 0.4\n      growthPeriods: [100, 1800, 4800, 1300, 1200]\n      growthRates: [0.00042, 0.00116,  0.00003, -0.00018, -0.00019]\n      rootGrowthRates: [0, -0.0005, 0, -0.0005, -0.0005]\n      periodVariation: 0.22\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      shapes: [\"tree1\", \"tree2\", \"tree3\"]\n    grass:\n      quantity: 33\n      inRows: false\n      annual: false\n      initialSize: 0.2\n      minGermination: 1\n      maxGermination: 800\n      growthPeriods: [120, 210, 1400, 150, 100]\n      growthRates: [0.0043, 0.0053,  0.0003, -0.0032, 0.0007]\n      rootGrowthRates: [0, -0.001, 0, -0.001, -0.001]\n      periodVariation: 0.15\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      shapes: [\"grass1\", \"grass2\"]\n    wheat:\n      quantity: 19\n      inRows: true\n      annual: true\n      initialSize: 0.2\n      minGermination: 60\n      maxGermination: 90\n      growthPeriods: [120, 210, 350, 100, 100]\n      growthRates: [0.0049,  0.0061,  0.0008,  0.0003, -0.0027]\n      rootGrowthRates: [0, 0, 0, -0.001, -0.001]\n      periodVariation: 0.04\n      minimumPrecipitation: 14\n      maximumPrecipitation: 450\n      shapes: [\"wheat1\"]\n\nwindow.PlantEngine = PlantEngine\n"]}